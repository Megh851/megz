#include <stdio.h>
#include <string.h>

int lengthOfLastWord(char *s) {
    int length = 0;
    int i = strlen(s) - 1;

    
    while (i >= 0 && s[i] == ' ') {
        i--;
    }

    
    while (i >= 0 && s[i] != ' ') {
        length++;
        i--;
    }

    return length;
}

int main() {
    char input[100]; // Adjust the size based on your needs
    printf("Enter a string: ");
    fgets(input, sizeof(input), stdin);

    
    input[strcspn(input, "\n")] = 0;

    int result = lengthOfLastWord(input);
    printf("Length of the last word: %d\n", result);

    return 0;
}



















#include <stdio.h>

void findMajorityElements(int arr[], int n) {
    int candidate1 = -1, candidate2 = -1, count1 = 0, count2 = 0;

    for (int i = 0; i < n; i++) {
        if (arr[i] == candidate1) {
            count1++;
        } else if (arr[i] == candidate2) {
            count2++;
        } else if (count1 == 0) {
            candidate1 = arr[i];
            count1 = 1;
        } else if (count2 == 0) {
            candidate2 = arr[i];
            count2 = 1;
        } else {
            count1--;
            count2--;
        }
    }

    count1 = count2 = 0;

  for (int i = 0; i < n; i++) {
        if (arr[i] == candidate1) {
            count1++;
        } else if (arr[i] == candidate2) {
            count2++;
        }
    }

    if (count1 > n / 3) {
        printf("%d ", candidate1);
    }
    if (count2 > n / 3) {
        printf("%d ", candidate2);
    }
}

int main() {
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);

int arr[n];
    printf("Enter the elements of the array: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("Elements appearing more than %d times: ", n / 3);
    findMajorityElements(arr, n);

    return 0;
}













#include <stdio.h>
#include <string.h>

// Function to check if a string is a palindrome
int isPalindrome(char *str, int start, int end) {
    while (start < end) {
        if (str[start] != str[end]) {
            return 0; // Not a palindrome
        }
        start++;
        end--;
    }
    return 1; // Palindrome
}

// Function to find the shortest palindrome by adding characters in front
char* shortestPalindrome(char *s) {
    int len = strlen(s);
    int i;

    // Check if the string itself is already a palindrome
    if (isPalindrome(s, 0, len - 1)) {
        return s;
    }

    char* result = (char *)malloc(sizeof(char) * (2 * len + 1)); // Allocate memory for result

    // Find the longest palindrome starting from the first character
    for (i = len - 1; i >= 0; i--) {
        if (isPalindrome(s, 0, i)) {
            break;
        }
    }

    // Build the shortest palindrome by adding characters in front
    int k = 0;
    for (int j = len - 1; j > i; j--) {
        result[k++] = s[j];
    }
    result[k] = '\0';

    strcat(result, s); // Concatenate the original string to the constructed palindrome

    return result;
}

int main() {
char input[100];
    printf("Enter a string: ");
    scanf("%s", input);

    char* shortest_palindrome = shortestPalindrome(input);

    printf("Shortest Palindrome: %s\n", shortest_palindrome);

    free(shortest_palindrome); // Free dynamically allocated memory

    return 0;
}
